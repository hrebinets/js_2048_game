{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = null){\n        this.board = initialState || this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"playing\";\n    }\n    createEmptyBoard() {\n        const board = [];\n        for(let i = 0; i < 4; i++)board.push([\n            0,\n            0,\n            0,\n            0\n        ]);\n        return board;\n    }\n    getState() {\n        return this.board;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        for (const row of this.board){\n            for (const tile of row)if (tile === 2048) {\n                this.status = \"win\";\n                return \"win\";\n            }\n        }\n        if (!this.hasAvailableMoves()) {\n            this.status = \"lose\";\n            return \"lose\";\n        }\n        return \"playing\";\n    }\n    hasEmptyCells() {\n        for (const row of this.board)for (const tile of row){\n            if (tile === 0) return true;\n        }\n        return false;\n    }\n    canMerge() {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (i < 3 && this.board[i][j] === this.board[i + 1][j]) return true;\n            if (j < 3 && this.board[i][j] === this.board[i][j + 1]) return true;\n        }\n        return false;\n    }\n    hasAvailableMoves() {\n        return this.hasEmptyCells() || this.canMerge();\n    }\n    moveLeft() {\n        let moved = false;\n        for(let i = 0; i < 4; i++){\n            const row = this.board[i];\n            const newRow = this.mergeRow(row);\n            if (newRow.some((tile, index)=>tile !== row[index])) moved = true;\n            this.board[i] = newRow;\n        }\n        if (moved) this.addRandomTile();\n        this.updateUI();\n    }\n    moveRight() {\n        let moved = false;\n        for(let i = 0; i < 4; i++){\n            const row = this.board[i];\n            const reversedRow = [\n                ...row\n            ].reverse();\n            const newRow = this.mergeRow(reversedRow);\n            if (newRow.some((tile, index)=>tile !== reversedRow[index])) moved = true;\n            this.board[i] = newRow.reverse();\n        }\n        if (moved) this.addRandomTile();\n        this.updateUI();\n    }\n    moveUp() {\n        let moved = false;\n        for(let j = 0; j < 4; j++){\n            const column = this.board.map((row)=>row[j]);\n            const newColumn = this.mergeRow(column);\n            for(let i = 0; i < 4; i++)this.board[i][j] = newColumn[i];\n            if (newColumn.some((tile, index)=>tile !== column[index])) moved = true;\n        }\n        if (moved) this.addRandomTile();\n        this.updateUI();\n    }\n    moveDown() {\n        let moved = false;\n        for(let j = 0; j < 4; j++){\n            const column = this.board.map((row)=>row[j]).reverse();\n            const newColumn = this.mergeRow(column);\n            for(let i = 0; i < 4; i++)this.board[i][j] = newColumn[3 - i];\n            if (newColumn.some((tile, index)=>tile !== column[index])) moved = true;\n        }\n        if (moved) this.addRandomTile();\n        this.updateUI();\n    }\n    mergeRow(row) {\n        const newRow = row.filter((tile)=>tile !== 0);\n        for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n            newRow[i] *= 2;\n            this.score += newRow[i];\n            newRow.splice(i + 1, 1);\n        }\n        while(newRow.length < 4)newRow.push(0);\n        return newRow;\n    }\n    start() {\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n        this.updateUI();\n    }\n    restart() {\n        this.start();\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let i = 0; i < 4; i++){\n            for(let j = 0; j < 4; j++)if (this.board[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        if (emptyCells.length === 0) return;\n        const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        const randomValue = Math.random() < 0.1 ? 4 : 2;\n        this.board[randomCell[0]][randomCell[1]] = randomValue;\n        // #region animation\n        // Trigger 'appear' animation\n        const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        const cellElement = document.querySelector(`.game-field tr:nth-child(${row + 1}) td:nth-child(${col + 1})`);\n        cellElement.classList.add(\"appear\");\n        // remove class after animation\n        setTimeout(()=>cellElement.classList.remove(\"appear\"), 300);\n    // #endregion\n    }\n    updateUI() {\n        const gameStatus = this.getStatus();\n        const startMessage = document.querySelector(\".message-start\");\n        const winMessage = document.querySelector(\".message-win\");\n        const loseMessage = document.querySelector(\".message-lose\");\n        startMessage.classList.add(\"hidden\");\n        if (gameStatus === \"win\") {\n            winMessage.classList.remove(\"hidden\");\n            loseMessage.classList.add(\"hidden\");\n        } else if (gameStatus === \"lose\") {\n            loseMessage.classList.remove(\"hidden\");\n            winMessage.classList.add(\"hidden\");\n        } else {\n            winMessage.classList.add(\"hidden\");\n            loseMessage.classList.add(\"hidden\");\n        }\n        document.querySelector(\".game-score\").textContent = this.score;\n        const cells = document.querySelectorAll(\".field-cell\");\n        let cellIndex = 0;\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            const tileValue = this.board[i][j];\n            const cell = cells[cellIndex];\n            cell.classList.remove(\"field-cell--2\", \"field-cell--4\", \"field-cell--8\", \"field-cell--16\", \"field-cell--32\", \"field-cell--64\", \"field-cell--128\", \"field-cell--256\", \"field-cell--512\", \"field-cell--1024\", \"field-cell--2048\");\n            if (tileValue !== 0) {\n                cell.classList.add(`field-cell--${tileValue}`);\n                cell.textContent = tileValue;\n            } else cell.textContent = \"\";\n            cellIndex++;\n        }\n    }\n    updateScoreDisplay() {\n        const scoreElement = document.querySelector(\".score\");\n        scoreElement.textContent = this.score;\n        // Add score update animation\n        scoreElement.classList.add(\"updated\");\n        // Remove class after animation\n        setTimeout(()=>scoreElement.classList.remove(\"updated\"), 300);\n    }\n    checkGameStatus() {\n        const statuses = this.getStatus();\n        const messageElement = document.querySelector(\".game-status\");\n        if (statuses === \"win\") messageElement.textContent = \"You Win!\";\n        else if (statuses === \"lose\") messageElement.textContent = \"Game Over!\";\n        else messageElement.textContent = \"Keep Going!\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\"button\");\nlet $09e991522ca7e64e$var$gameStarted = false;\nfunction $09e991522ca7e64e$var$handleKeyPress(e) {\n    if (!$09e991522ca7e64e$var$gameStarted) {\n        $09e991522ca7e64e$var$gameStarted = true;\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n    }\n    if (e.key === \"ArrowLeft\") $09e991522ca7e64e$var$game.moveLeft();\n    else if (e.key === \"ArrowRight\") $09e991522ca7e64e$var$game.moveRight();\n    else if (e.key === \"ArrowUp\") $09e991522ca7e64e$var$game.moveUp();\n    else if (e.key === \"ArrowDown\") $09e991522ca7e64e$var$game.moveDown();\n    $09e991522ca7e64e$var$game.updateScoreDisplay();\n    $09e991522ca7e64e$var$game.checkGameStatus();\n}\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyPress);\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if (!$09e991522ca7e64e$var$gameStarted) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n        $09e991522ca7e64e$var$gameStarted = true;\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n        $09e991522ca7e64e$var$gameStarted = false;\n    }\n    $09e991522ca7e64e$var$startButton.classList.toggle(\"start\");\n    $09e991522ca7e64e$var$startButton.classList.toggle(\"restart\");\n    $09e991522ca7e64e$var$game.updateScoreDisplay();\n    $09e991522ca7e64e$var$game.checkGameStatus();\n});\n\n\n//# sourceMappingURL=index.7b23ebf9.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class.js');\nconst game = new Game();\n\nconst startButton = document.querySelector('button');\nlet gameStarted = false;\n\nfunction handleKeyPress(e) {\n  if (!gameStarted) {\n    gameStarted = true;\n    game.start();\n    startButton.textContent = 'Restart';\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n  }\n\n  if (e.key === 'ArrowLeft') {\n    game.moveLeft();\n  } else if (e.key === 'ArrowRight') {\n    game.moveRight();\n  } else if (e.key === 'ArrowUp') {\n    game.moveUp();\n  } else if (e.key === 'ArrowDown') {\n    game.moveDown();\n  }\n\n  game.updateScoreDisplay();\n  game.checkGameStatus();\n}\n\ndocument.addEventListener('keydown', handleKeyPress);\n\nstartButton.addEventListener('click', () => {\n  if (!gameStarted) {\n    game.start();\n    startButton.textContent = 'Restart';\n    gameStarted = true;\n  } else {\n    game.restart();\n    startButton.textContent = 'Start';\n    gameStarted = false;\n  }\n\n  startButton.classList.toggle('start');\n  startButton.classList.toggle('restart');\n\n  game.updateScoreDisplay();\n  game.checkGameStatus();\n});\n","'use strict';\n\nclass Game {\n  constructor(initialState = null) {\n    this.board = initialState || this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'playing';\n  }\n\n  createEmptyBoard() {\n    const board = [];\n\n    for (let i = 0; i < 4; i++) {\n      board.push([0, 0, 0, 0]);\n    }\n\n    return board;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    for (const row of this.board) {\n      for (const tile of row) {\n        if (tile === 2048) {\n          this.status = 'win';\n\n          return 'win';\n        }\n      }\n    }\n\n    if (!this.hasAvailableMoves()) {\n      this.status = 'lose';\n\n      return 'lose';\n    }\n\n    return 'playing';\n  }\n\n  hasEmptyCells() {\n    for (const row of this.board) {\n      for (const tile of row) {\n        if (tile === 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  canMerge() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (i < 3 && this.board[i][j] === this.board[i + 1][j]) {\n          return true;\n        }\n\n        if (j < 3 && this.board[i][j] === this.board[i][j + 1]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  hasAvailableMoves() {\n    return this.hasEmptyCells() || this.canMerge();\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (let i = 0; i < 4; i++) {\n      const row = this.board[i];\n      const newRow = this.mergeRow(row);\n\n      if (newRow.some((tile, index) => tile !== row[index])) {\n        moved = true;\n      }\n      this.board[i] = newRow;\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.updateUI();\n  }\n\n  moveRight() {\n    let moved = false;\n\n    for (let i = 0; i < 4; i++) {\n      const row = this.board[i];\n      const reversedRow = [...row].reverse();\n      const newRow = this.mergeRow(reversedRow);\n\n      if (newRow.some((tile, index) => tile !== reversedRow[index])) {\n        moved = true;\n      }\n      this.board[i] = newRow.reverse();\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.updateUI();\n  }\n\n  moveUp() {\n    let moved = false;\n\n    for (let j = 0; j < 4; j++) {\n      const column = this.board.map((row) => row[j]);\n      const newColumn = this.mergeRow(column);\n\n      for (let i = 0; i < 4; i++) {\n        this.board[i][j] = newColumn[i];\n      }\n\n      if (newColumn.some((tile, index) => tile !== column[index])) {\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.updateUI();\n  }\n\n  moveDown() {\n    let moved = false;\n\n    for (let j = 0; j < 4; j++) {\n      const column = this.board.map((row) => row[j]).reverse();\n      const newColumn = this.mergeRow(column);\n\n      for (let i = 0; i < 4; i++) {\n        this.board[i][j] = newColumn[3 - i];\n      }\n\n      if (newColumn.some((tile, index) => tile !== column[index])) {\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.updateUI();\n  }\n\n  mergeRow(row) {\n    const newRow = row.filter((tile) => tile !== 0);\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        this.score += newRow[i];\n        newRow.splice(i + 1, 1);\n      }\n    }\n\n    while (newRow.length < 4) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  start() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n    this.updateUI();\n  }\n\n  restart() {\n    this.start();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomCell =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    const randomValue = Math.random() < 0.1 ? 4 : 2;\n\n    this.board[randomCell[0]][randomCell[1]] = randomValue;\n\n    // #region animation\n    // Trigger 'appear' animation\n    const [row, col] =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    const cellElement = document.querySelector(\n      `.game-field tr:nth-child(${row + 1}) td:nth-child(${col + 1})`,\n    );\n\n    cellElement.classList.add('appear');\n\n    // remove class after animation\n    setTimeout(() => cellElement.classList.remove('appear'), 300);\n    // #endregion\n  }\n\n  updateUI() {\n    const gameStatus = this.getStatus();\n    const startMessage = document.querySelector('.message-start');\n    const winMessage = document.querySelector('.message-win');\n    const loseMessage = document.querySelector('.message-lose');\n\n    startMessage.classList.add('hidden');\n\n    if (gameStatus === 'win') {\n      winMessage.classList.remove('hidden');\n      loseMessage.classList.add('hidden');\n    } else if (gameStatus === 'lose') {\n      loseMessage.classList.remove('hidden');\n      winMessage.classList.add('hidden');\n    } else {\n      winMessage.classList.add('hidden');\n      loseMessage.classList.add('hidden');\n    }\n\n    document.querySelector('.game-score').textContent = this.score;\n\n    const cells = document.querySelectorAll('.field-cell');\n\n    let cellIndex = 0;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const tileValue = this.board[i][j];\n        const cell = cells[cellIndex];\n\n        cell.classList.remove(\n          'field-cell--2',\n          'field-cell--4',\n          'field-cell--8',\n          'field-cell--16',\n          'field-cell--32',\n          'field-cell--64',\n          'field-cell--128',\n          'field-cell--256',\n          'field-cell--512',\n          'field-cell--1024',\n          'field-cell--2048',\n        );\n\n        if (tileValue !== 0) {\n          cell.classList.add(`field-cell--${tileValue}`);\n          cell.textContent = tileValue;\n        } else {\n          cell.textContent = '';\n        }\n\n        cellIndex++;\n      }\n    }\n  }\n\n  updateScoreDisplay() {\n    const scoreElement = document.querySelector('.score');\n\n    scoreElement.textContent = this.score;\n\n    // Add score update animation\n    scoreElement.classList.add('updated');\n\n    // Remove class after animation\n    setTimeout(() => scoreElement.classList.remove('updated'), 300);\n  }\n\n  checkGameStatus() {\n    const statuses = this.getStatus();\n    const messageElement = document.querySelector('.game-status');\n\n    if (statuses === 'win') {\n      messageElement.textContent = 'You Win!';\n    } else if (statuses === 'lose') {\n      messageElement.textContent = 'Game Over!';\n    } else {\n      messageElement.textContent = 'Keep Going!';\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","createEmptyBoard","score","status","i","push","getState","getScore","getStatus","row","tile","hasAvailableMoves","hasEmptyCells","canMerge","j","moveLeft","moved","newRow","mergeRow","some","index","addRandomTile","updateUI","moveRight","reversedRow","reverse","moveUp","column","map","newColumn","moveDown","filter","length","splice","start","restart","emptyCells","randomCell","Math","floor","random","randomValue","col","cellElement","document","querySelector","classList","add","setTimeout","remove","gameStatus","startMessage","winMessage","loseMessage","textContent","cells","querySelectorAll","cellIndex","tileValue","cell","updateScoreDisplay","scoreElement","checkGameStatus","statuses","messageElement","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$gameStarted","addEventListener","e","key","toggle"],"version":3,"file":"index.7b23ebf9.js.map"}