{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $09cbfe85151ea6c6$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$71511d61b312f219(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $efec029548ccee7f$export$71511d61b312f219(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$71511d61b312f219)(arr) || (0, $8ca2848f896a6803$export$71511d61b312f219)(arr, i) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr, i) || (0, $a0bc1859061deae1$export$71511d61b312f219)();\n}\n\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.board = initialState || this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"playing\";\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"createEmptyBoard\",\n            value: function createEmptyBoard() {\n                var board = [];\n                for(var i = 0; i < 4; i++)board.push([\n                    0,\n                    0,\n                    0,\n                    0\n                ]);\n                return board;\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.board[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                        try {\n                            for(var _iterator1 = row[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                                var tile = _step1.value;\n                                if (tile === 2048) {\n                                    this.status = \"win\";\n                                    return \"win\";\n                                }\n                            }\n                        } catch (err) {\n                            _didIteratorError1 = true;\n                            _iteratorError1 = err;\n                        } finally{\n                            try {\n                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                    _iterator1.return();\n                                }\n                            } finally{\n                                if (_didIteratorError1) {\n                                    throw _iteratorError1;\n                                }\n                            }\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                if (!this.hasAvailableMoves()) {\n                    this.status = \"lose\";\n                    return \"lose\";\n                }\n                return \"playing\";\n            }\n        },\n        {\n            key: \"hasEmptyCells\",\n            value: function hasEmptyCells() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined, _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                try {\n                    for(var _iterator = this.board[Symbol.iterator](), _step; !(_iteratorNormalCompletion1 = (_step = _iterator.next()).done); _iteratorNormalCompletion1 = true){\n                        var row = _step.value;\n                        try {\n                            for(var _iterator1 = row[Symbol.iterator](), _step1; !(_iteratorNormalCompletion = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion = true){\n                                var tile = _step1.value;\n                                if (tile === 0) return true;\n                            }\n                        } catch (err) {\n                            _didIteratorError = true;\n                            _iteratorError = err;\n                        } finally{\n                            try {\n                                if (!_iteratorNormalCompletion && _iterator1.return != null) {\n                                    _iterator1.return();\n                                }\n                            } finally{\n                                if (_didIteratorError) {\n                                    throw _iteratorError;\n                                }\n                            }\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError1 = true;\n                    _iteratorError1 = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion1 && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError1) {\n                            throw _iteratorError1;\n                        }\n                    }\n                }\n                return false;\n            }\n        },\n        {\n            key: \"canMerge\",\n            value: function canMerge() {\n                for(var i = 0; i < 4; i++)for(var j = 0; j < 4; j++){\n                    if (i < 3 && this.board[i][j] === this.board[i + 1][j]) return true;\n                    if (j < 3 && this.board[i][j] === this.board[i][j + 1]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"hasAvailableMoves\",\n            value: function hasAvailableMoves() {\n                return this.hasEmptyCells() || this.canMerge();\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(i) {\n                    var row = _this.board[i];\n                    var newRow = _this.mergeRow(row);\n                    if (newRow.some(function(tile, index) {\n                        return tile !== row[index];\n                    })) moved = true;\n                    _this.board[i] = newRow;\n                };\n                var moved = false;\n                for(var i = 0; i < 4; i++)_loop(i);\n                if (moved) this.addRandomTile();\n                this.updateUI();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(i) {\n                    var row = _this.board[i];\n                    var reversedRow = (0, $227c6742e0ff6f82$export$71511d61b312f219)(row).reverse();\n                    var newRow = _this.mergeRow(reversedRow);\n                    if (newRow.some(function(tile, index) {\n                        return tile !== reversedRow[index];\n                    })) moved = true;\n                    _this.board[i] = newRow.reverse();\n                };\n                var moved = false;\n                for(var i = 0; i < 4; i++)_loop(i);\n                if (moved) this.addRandomTile();\n                this.updateUI();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this, _loop = function(j) {\n                    var column = _this.board.map(function(row) {\n                        return row[j];\n                    });\n                    var newColumn = _this.mergeRow(column);\n                    for(var i = 0; i < 4; i++)_this.board[i][j] = newColumn[i];\n                    if (newColumn.some(function(tile, index) {\n                        return tile !== column[index];\n                    })) moved = true;\n                };\n                var moved = false;\n                for(var j = 0; j < 4; j++)_loop(j);\n                if (moved) this.addRandomTile();\n                this.updateUI();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this, _loop = function(j) {\n                    var column = _this.board.map(function(row) {\n                        return row[j];\n                    }).reverse();\n                    var newColumn = _this.mergeRow(column);\n                    for(var i = 0; i < 4; i++)_this.board[i][j] = newColumn[3 - i];\n                    if (newColumn.some(function(tile, index) {\n                        return tile !== column[index];\n                    })) moved = true;\n                };\n                var moved = false;\n                for(var j = 0; j < 4; j++)_loop(j);\n                if (moved) this.addRandomTile();\n                this.updateUI();\n            }\n        },\n        {\n            key: \"mergeRow\",\n            value: function mergeRow(row) {\n                var newRow = row.filter(function(tile) {\n                    return tile !== 0;\n                });\n                for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                    newRow[i] *= 2;\n                    this.score += newRow[i];\n                    newRow.splice(i + 1, 1);\n                }\n                while(newRow.length < 4)newRow.push(0);\n                return newRow;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                this.board = this.createEmptyBoard();\n                this.score = 0;\n                this.status = \"playing\";\n                this.addRandomTile();\n                this.addRandomTile();\n                this.updateUI();\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.start();\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var i = 0; i < 4; i++){\n                    for(var j = 0; j < 4; j++)if (this.board[i][j] === 0) emptyCells.push([\n                        i,\n                        j\n                    ]);\n                }\n                if (emptyCells.length === 0) return;\n                var randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n                var randomValue = Math.random() < 0.1 ? 4 : 2;\n                this.board[randomCell[0]][randomCell[1]] = randomValue;\n                // #region animation\n                // Trigger 'appear' animation\n                var _emptyCells_Math_floor = (0, $efec029548ccee7f$export$71511d61b312f219)(emptyCells[Math.floor(Math.random() * emptyCells.length)], 2), row = _emptyCells_Math_floor[0], col = _emptyCells_Math_floor[1];\n                var cellElement = document.querySelector(\".game-field tr:nth-child(\".concat(row + 1, \") td:nth-child(\").concat(col + 1, \")\"));\n                cellElement.classList.add(\"appear\");\n                // remove class after animation\n                setTimeout(function() {\n                    return cellElement.classList.remove(\"appear\");\n                }, 300);\n            // #endregion\n            }\n        },\n        {\n            key: \"updateUI\",\n            value: function updateUI() {\n                var gameStatus = this.getStatus();\n                var startMessage = document.querySelector(\".message-start\");\n                var winMessage = document.querySelector(\".message-win\");\n                var loseMessage = document.querySelector(\".message-lose\");\n                startMessage.classList.add(\"hidden\");\n                if (gameStatus === \"win\") {\n                    winMessage.classList.remove(\"hidden\");\n                    loseMessage.classList.add(\"hidden\");\n                } else if (gameStatus === \"lose\") {\n                    loseMessage.classList.remove(\"hidden\");\n                    winMessage.classList.add(\"hidden\");\n                } else {\n                    winMessage.classList.add(\"hidden\");\n                    loseMessage.classList.add(\"hidden\");\n                }\n                document.querySelector(\".game-score\").textContent = this.score;\n                var cells = document.querySelectorAll(\".field-cell\");\n                var cellIndex = 0;\n                for(var i = 0; i < 4; i++)for(var j = 0; j < 4; j++){\n                    var tileValue = this.board[i][j];\n                    var cell = cells[cellIndex];\n                    cell.classList.remove(\"field-cell--2\", \"field-cell--4\", \"field-cell--8\", \"field-cell--16\", \"field-cell--32\", \"field-cell--64\", \"field-cell--128\", \"field-cell--256\", \"field-cell--512\", \"field-cell--1024\", \"field-cell--2048\");\n                    if (tileValue !== 0) {\n                        cell.classList.add(\"field-cell--\".concat(tileValue));\n                        cell.textContent = tileValue;\n                    } else cell.textContent = \"\";\n                    cellIndex++;\n                }\n            }\n        },\n        {\n            key: \"updateScoreDisplay\",\n            value: function updateScoreDisplay() {\n                var scoreElement = document.querySelector(\".score\");\n                scoreElement.textContent = this.score;\n                // Add score update animation\n                scoreElement.classList.add(\"updated\");\n                // Remove class after animation\n                setTimeout(function() {\n                    return scoreElement.classList.remove(\"updated\");\n                }, 300);\n            }\n        },\n        {\n            key: \"checkGameStatus\",\n            value: function checkGameStatus() {\n                var statuses = this.getStatus();\n                var messageElement = document.querySelector(\".game-status\");\n                if (statuses === \"win\") messageElement.textContent = \"You Win!\";\n                else if (statuses === \"lose\") messageElement.textContent = \"Game Over!\";\n                else messageElement.textContent = \"Keep Going!\";\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$startButton = document.querySelector(\"button\");\nvar $197cd56b15c33885$var$gameStarted = false;\nfunction $197cd56b15c33885$var$handleKeyPress(e) {\n    if (!$197cd56b15c33885$var$gameStarted) {\n        $197cd56b15c33885$var$gameStarted = true;\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$startButton.textContent = \"Restart\";\n        $197cd56b15c33885$var$startButton.classList.remove(\"start\");\n        $197cd56b15c33885$var$startButton.classList.add(\"restart\");\n    }\n    if (e.key === \"ArrowLeft\") $197cd56b15c33885$var$game.moveLeft();\n    else if (e.key === \"ArrowRight\") $197cd56b15c33885$var$game.moveRight();\n    else if (e.key === \"ArrowUp\") $197cd56b15c33885$var$game.moveUp();\n    else if (e.key === \"ArrowDown\") $197cd56b15c33885$var$game.moveDown();\n    $197cd56b15c33885$var$game.updateScoreDisplay();\n    $197cd56b15c33885$var$game.checkGameStatus();\n}\ndocument.addEventListener(\"keydown\", $197cd56b15c33885$var$handleKeyPress);\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function() {\n    if (!$197cd56b15c33885$var$gameStarted) {\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$startButton.textContent = \"Restart\";\n        $197cd56b15c33885$var$gameStarted = true;\n    } else {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$startButton.textContent = \"Start\";\n        $197cd56b15c33885$var$gameStarted = false;\n    }\n    $197cd56b15c33885$var$startButton.classList.toggle(\"start\");\n    $197cd56b15c33885$var$startButton.classList.toggle(\"restart\");\n    $197cd56b15c33885$var$game.updateScoreDisplay();\n    $197cd56b15c33885$var$game.checkGameStatus();\n});\n\n})();\n//# sourceMappingURL=index.0def1e66.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class.js');\nconst game = new Game();\n\nconst startButton = document.querySelector('button');\nlet gameStarted = false;\n\nfunction handleKeyPress(e) {\n  if (!gameStarted) {\n    gameStarted = true;\n    game.start();\n    startButton.textContent = 'Restart';\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n  }\n\n  if (e.key === 'ArrowLeft') {\n    game.moveLeft();\n  } else if (e.key === 'ArrowRight') {\n    game.moveRight();\n  } else if (e.key === 'ArrowUp') {\n    game.moveUp();\n  } else if (e.key === 'ArrowDown') {\n    game.moveDown();\n  }\n\n  game.updateScoreDisplay();\n  game.checkGameStatus();\n}\n\ndocument.addEventListener('keydown', handleKeyPress);\n\nstartButton.addEventListener('click', () => {\n  if (!gameStarted) {\n    game.start();\n    startButton.textContent = 'Restart';\n    gameStarted = true;\n  } else {\n    game.restart();\n    startButton.textContent = 'Start';\n    gameStarted = false;\n  }\n\n  startButton.classList.toggle('start');\n  startButton.classList.toggle('restart');\n\n  game.updateScoreDisplay();\n  game.checkGameStatus();\n});\n","'use strict';\n\nclass Game {\n  constructor(initialState = null) {\n    this.board = initialState || this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'playing';\n  }\n\n  createEmptyBoard() {\n    const board = [];\n\n    for (let i = 0; i < 4; i++) {\n      board.push([0, 0, 0, 0]);\n    }\n\n    return board;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    for (const row of this.board) {\n      for (const tile of row) {\n        if (tile === 2048) {\n          this.status = 'win';\n\n          return 'win';\n        }\n      }\n    }\n\n    if (!this.hasAvailableMoves()) {\n      this.status = 'lose';\n\n      return 'lose';\n    }\n\n    return 'playing';\n  }\n\n  hasEmptyCells() {\n    for (const row of this.board) {\n      for (const tile of row) {\n        if (tile === 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  canMerge() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (i < 3 && this.board[i][j] === this.board[i + 1][j]) {\n          return true;\n        }\n\n        if (j < 3 && this.board[i][j] === this.board[i][j + 1]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  hasAvailableMoves() {\n    return this.hasEmptyCells() || this.canMerge();\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (let i = 0; i < 4; i++) {\n      const row = this.board[i];\n      const newRow = this.mergeRow(row);\n\n      if (newRow.some((tile, index) => tile !== row[index])) {\n        moved = true;\n      }\n      this.board[i] = newRow;\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.updateUI();\n  }\n\n  moveRight() {\n    let moved = false;\n\n    for (let i = 0; i < 4; i++) {\n      const row = this.board[i];\n      const reversedRow = [...row].reverse();\n      const newRow = this.mergeRow(reversedRow);\n\n      if (newRow.some((tile, index) => tile !== reversedRow[index])) {\n        moved = true;\n      }\n      this.board[i] = newRow.reverse();\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.updateUI();\n  }\n\n  moveUp() {\n    let moved = false;\n\n    for (let j = 0; j < 4; j++) {\n      const column = this.board.map((row) => row[j]);\n      const newColumn = this.mergeRow(column);\n\n      for (let i = 0; i < 4; i++) {\n        this.board[i][j] = newColumn[i];\n      }\n\n      if (newColumn.some((tile, index) => tile !== column[index])) {\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.updateUI();\n  }\n\n  moveDown() {\n    let moved = false;\n\n    for (let j = 0; j < 4; j++) {\n      const column = this.board.map((row) => row[j]).reverse();\n      const newColumn = this.mergeRow(column);\n\n      for (let i = 0; i < 4; i++) {\n        this.board[i][j] = newColumn[3 - i];\n      }\n\n      if (newColumn.some((tile, index) => tile !== column[index])) {\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.updateUI();\n  }\n\n  mergeRow(row) {\n    const newRow = row.filter((tile) => tile !== 0);\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        this.score += newRow[i];\n        newRow.splice(i + 1, 1);\n      }\n    }\n\n    while (newRow.length < 4) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  start() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n    this.updateUI();\n  }\n\n  restart() {\n    this.start();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomCell =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    const randomValue = Math.random() < 0.1 ? 4 : 2;\n\n    this.board[randomCell[0]][randomCell[1]] = randomValue;\n\n    // #region animation\n    // Trigger 'appear' animation\n    const [row, col] =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    const cellElement = document.querySelector(\n      `.game-field tr:nth-child(${row + 1}) td:nth-child(${col + 1})`,\n    );\n\n    cellElement.classList.add('appear');\n\n    // remove class after animation\n    setTimeout(() => cellElement.classList.remove('appear'), 300);\n    // #endregion\n  }\n\n  updateUI() {\n    const gameStatus = this.getStatus();\n    const startMessage = document.querySelector('.message-start');\n    const winMessage = document.querySelector('.message-win');\n    const loseMessage = document.querySelector('.message-lose');\n\n    startMessage.classList.add('hidden');\n\n    if (gameStatus === 'win') {\n      winMessage.classList.remove('hidden');\n      loseMessage.classList.add('hidden');\n    } else if (gameStatus === 'lose') {\n      loseMessage.classList.remove('hidden');\n      winMessage.classList.add('hidden');\n    } else {\n      winMessage.classList.add('hidden');\n      loseMessage.classList.add('hidden');\n    }\n\n    document.querySelector('.game-score').textContent = this.score;\n\n    const cells = document.querySelectorAll('.field-cell');\n\n    let cellIndex = 0;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const tileValue = this.board[i][j];\n        const cell = cells[cellIndex];\n\n        cell.classList.remove(\n          'field-cell--2',\n          'field-cell--4',\n          'field-cell--8',\n          'field-cell--16',\n          'field-cell--32',\n          'field-cell--64',\n          'field-cell--128',\n          'field-cell--256',\n          'field-cell--512',\n          'field-cell--1024',\n          'field-cell--2048',\n        );\n\n        if (tileValue !== 0) {\n          cell.classList.add(`field-cell--${tileValue}`);\n          cell.textContent = tileValue;\n        } else {\n          cell.textContent = '';\n        }\n\n        cellIndex++;\n      }\n    }\n  }\n\n  updateScoreDisplay() {\n    const scoreElement = document.querySelector('.score');\n\n    scoreElement.textContent = this.score;\n\n    // Add score update animation\n    scoreElement.classList.add('updated');\n\n    // Remove class after animation\n    setTimeout(() => scoreElement.classList.remove('updated'), 300);\n  }\n\n  checkGameStatus() {\n    const statuses = this.getStatus();\n    const messageElement = document.querySelector('.game-status');\n\n    if (statuses === 'win') {\n      messageElement.textContent = 'You Win!';\n    } else if (statuses === 'lose') {\n      messageElement.textContent = 'Game Over!';\n    } else {\n      messageElement.textContent = 'Keep Going!';\n    }\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_with_holes } from \"./_array_with_holes.js\";\nimport { _ as _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _ as _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$d4f69c5c6c4654b1$export$71511d61b312f219","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","instance","Constructor","TypeError","board","createEmptyBoard","score","status","key","value","push","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","tile","err","return","hasAvailableMoves","j","hasEmptyCells","canMerge","_this","moved","_loop","newRow","mergeRow","some","index","addRandomTile","updateUI","reversedRow","isArray","iter","reverse","column","map","newColumn","filter","splice","start","emptyCells","randomCell","Math","floor","random","randomValue","_emptyCells_Math_floor","_s","_e","_i","_arr","_n","_d","col","cellElement","document","querySelector","concat","classList","add","setTimeout","remove","gameStatus","getStatus","startMessage","winMessage","loseMessage","textContent","cells","querySelectorAll","cellIndex","tileValue","cell","scoreElement","statuses","messageElement","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$startButton","$197cd56b15c33885$var$gameStarted","addEventListener","e","moveLeft","moveRight","moveUp","moveDown","updateScoreDisplay","checkGameStatus","restart","toggle"],"version":3,"file":"index.0def1e66.js.map"}